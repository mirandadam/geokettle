<?xml version="1.0" encoding="UTF-8"?>
<plugins>
<!-- 
 PDI plugins are loaded based on the entries on this file.  Currently, two types of plugin locations are supported: file system folder or jar files.
 	
 	FILE SYSTEM FOLDERS:
 	A plugin folder may contain:
 	1- One or more subfolders each with plugin definitions (plugin.xml and relevant class files packaged in a jar file.)
 	2- Jar files that represent plugins themselves and follow the same file hierarchy as folder plugins.
 	
	Jar files containing the plugins can be located using any valid URI.  For instance, jar files can be loaded from a remote server using HTTP, FTP,
	or simply be loaded from the local file system or a network share.
	
 	Obviously, jar plugins should have the same file organization as a folder-based plugin entry.
	
	In order to work property, jar locations resolving to the local file system should be prefixed with jar:. Otherwise, VFS will not recognize them
	as "proper" jar files and they will not be deployed properly. For instance:
	jar:file:///c:/testplugin.jar -> GOOD
	file:///c:/testplugin.jar -> BAD
	
	Plugin jars are also "exploded" and deployed into the user's working directory after loaded.  Currently, this is the ~/.kettle/work directory.
	
	This was partially due to a JVM bug (4735639 - URLClassLoaders do not work with nested jar files) but I believe this was actually better than doing
	remote class loading over HTTP or any other remote protocol.  This way, after the initial loading all plugins are local.  
	
	Lastly, relative paths will be resolved to resources on the local file system, relative to the current working directory.
 	-->
	<plugin id="PUBLIC_JOBENTRIES_DIR">
		<location>plugins/jobentries</location>
	</plugin>
	<plugin id="PUBLIC_STEPS_DIR">
		<location>plugins/steps</location>
	</plugin>
	<plugin id="PRIVATE_JOBENTRIES_DIR">
		<location>
			ognl:@org.pentaho.di.core.Const@getKettleDirectory()+"/plugins/"
		</location>
	</plugin>
	<!-- 
	EXAMPLES:
	<plugin id="FILE_JAR">
		<location>http://localhost:8080/pentaho-style/testplugin.jar</location>
	</plugin>
	<plugin id="HTTP_JAR">
		<location>jar:file:///c:/testplugin.jar</location>
	</plugin>
	-->
</plugins>
