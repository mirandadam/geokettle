<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>example e4x</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_status>0</trans_status>
    <directory>&#47;</directory>
    <log>
      <read/>
      <write/>
      <input/>
      <output/>
      <update/>
      <rejected/>
      <connection/>
      <table/>
      <step_performance_table/>
      <use_batchid>Y</use_batchid>
      <use_logfield>N</use_logfield>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <modified_user>-</modified_user>
  <modified_date>2008&#47;09&#47;05 14:35:54.727</modified_date>
  </info>
  <notepads>
    <notepad>
      <note>This transformation reads an XML file in JavaScript and extracts information from it as well.
Because of limitations inside of E4X, the header of the XML file needs to be stripped out before we can work with the data.

The interesting E4X part is this :

contentXML.levelTwo.level3.(@id == &quot;2&quot;).@value;
for each (var value in level3ID2Values) 
{
 &#47;* Generate rows *&#47;
}

</note>
      <xloc>28</xloc>
      <yloc>312</yloc>
      <width>712</width>
      <heigth>166</heigth>
    </notepad>
  </notepads>
  <order>
  <hop> <from>Get File Names</from><to>Select values</to><enabled>Y</enabled> </hop>  <hop> <from>Select values</from><to>E4X</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>E4X</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <compatible>N</compatible>
    <jsScripts>      <jsScript>        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>if (&quot;Rhino 1.7 release 1 2008 03 06&quot; != Packages.org.mozilla.javascript.Context.getCurrentContext().getImplementationVersion())
{
	Alert(&quot;Rhino js.jar must be version Rhino 1.7R1. Your version is:\n&quot;+Packages.org.mozilla.javascript.Context.getCurrentContext().getImplementationVersion());
}

fileInputStream = new java.io.FileInputStream(filename);
contentBytes = Packages.org.pentaho.di.core.Const.createByteArray(fileInputStream.available());
fileInputStream.read(contentBytes);
fileInputStream.close();

var contentString = new java.lang.String(contentBytes);
contentString = contentString.replaceFirst(&quot;&lt;\\?xml[^&gt;]*\\?&gt;\\s*&quot;, &quot;&quot;);

var contentXML = new XML(contentString);

level3ID2Values = contentXML.levelTwo.level3.(@id == &quot;2&quot;).@value;

var level3ID2Value = &quot;&quot;;
for each (var value in level3ID2Values)
{
	level3ID2Value = value;
	newRow = createRowCopy(getOutputRowMeta().size());
	newRow[getInputRowMeta().size()] = java.lang.Double.valueOf(level3ID2Value);
	putRow(newRow);
}

&#47;&#47; Don&apos;t output the input row.
trans_Status = SKIP_TRANSFORMATION;</jsScript_script>
      </jsScript>    </jsScripts>    <fields>      <field>        <name>level3ID2Value</name>
        <rename>level3ID2Value</rename>
        <type>Number</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>201</xloc>
      <yloc>248</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Get File Names</name>
    <type>GetFileNames</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <filter>
      <filterfiletype>all_files</filterfiletype>
    </filter>
    <rownum>N</rownum>
    <isaddresult>Y</isaddresult>
    <filefield>N</filefield>
    <rownum_field/>
    <filename_Field/>
    <wildcard_Field/>
    <limit>0</limit>
    <file>
      <name>${Internal.Transformation.Filename.Directory}&#47;files&#47;</name>
      <filemask>example.xml</filemask>
      <file_required/>
    </file>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>200</xloc>
      <yloc>51</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>Select values</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>      <field>        <name>filename</name>
        <rename/>
        <length>-2</length>
        <precision>-2</precision>
      </field>        <select_unspecified>N</select_unspecified>
    </fields>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>200</xloc>
      <yloc>150</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
